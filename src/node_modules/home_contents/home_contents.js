const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const home_page_header = require('home_page_header')
const action_buttons = require('action_buttons')
const transaction_list = require('transaction_list')
const total_wealth = require('total_wealth')

module.exports = home_contents

async function home_contents (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = { style: inject, data: ondata }

  const el = document.createElement('div')
  el.id = "home_contents"
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="home-contents-container"></div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const container = shadow.querySelector('.home-contents-container')

  const subs = await sdb.watch(onbatch)

  // ✅ load components in order
  const home_page_header_component = await home_page_header(subs[0])
  const action_buttons_component = await action_buttons(subs[1])
  const transaction_list_component = await transaction_list(subs[2])
  const total_wealth_component = await total_wealth(subs[3])

  // ✅ append all four in order
  container.append(
    home_page_header_component,
    action_buttons_component,
    transaction_list_component,
    total_wealth_component
  )

  return el

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(p => drive.get(p).then(f => f.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) { style.textContent = data[0] }
  function ondata(data) {}
  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }
}

function fallback_module () {
  return {
    api,
    _: { 
      'home_page_header': { $: '' },
      'action_buttons': { $: '' },
      'transaction_list': { $: '' },
      'total_wealth': { $: '' }
    }
  }

  function api(opts) {
    const home_page_header = {
      mapping: { style: 'style', data: 'data', icons: 'icons' },
      0: { wallet: 'btc', amount: "0.9616" }
    }

    const action_buttons = {
      mapping: { style: 'style', data: 'data' },
      0: { buttons: { wallet: 'lightning' } }
    }

    const transaction_list = {
      mapping: { style: 'style', data: 'data' },
      0: {
        value: [
       {
            tid: "Luis fedrick",
            ttime: "11:30 AM",
            tamount: "+ 0.02456",
            avatar: "https://tse4.mm.bing.net/th/id/OIP.VIRWK2jj8b2cHBaymZC5AgHaHa?w=800&h=800&rs=1&pid=ImgDetMain&o=7&rm=3"
          },
          {
            tid: "skdmf932ksdmf0234lsd",
            ttime: "02:15 PM",
            tamount: "+ 0.03271",
          },
          {
            tid: "Mark Kevin",
            ttime: "03:45 PM",
            tamount: "- 0.00421",
            avatar: "https://images.stockcake.com/public/a/1/3/a13b303a-a843-48e3-8c87-c0ac0314a282_large/intense-male-portrait-stockcake.jpg"     
          },
          {
            tid: "QWErty9834asdLKJhf",
            ttime: "04:45 PM",
            tamount: "- 0.03791",
          },
          {
            tid: "Luis fedrick",
            ttime: "11:30 AM",
            tamount: "+ 0.02456",
            avatar: "https://tse2.mm.bing.net/th/id/OIP.255ajP8y6dHwTTO8QbBzqwHaHa?rs=1&pid=ImgDetMain&o=7&rm=3"
          },    ]
      }
    }

    const total_wealth = {
      mapping: { style: 'style', data: 'data', icons: 'icons' },
      0: {
        value: {
          total: 0.9862,
          usd: 1000,
          lightning: 0.02456,
          bitcoin: 0.96164
        }
      }
    }

    return {
      drive: {
        'style/': { 'home_contents.css': { '$ref': 'home_contents.css' } },
        'data/': { 'opts.json': { raw: opts } }
      },
      _: { home_page_header, action_buttons, transaction_list, total_wealth }
    }
  }
}