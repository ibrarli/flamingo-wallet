const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = black_button

async function black_button (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })



  shadow.innerHTML = `
    <button class="black-btn"></button>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const btn_text = shadow.querySelector('.black-btn')

  await sdb.watch(onbatch)

  return el

  function fail (data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {
    const {label} = data[0]
    
    btn_text.innerHTML = `
      <div>${label}</div>
    `
  }
}

function fallback_module () {
  return {
    api: fallback_instance
  }

  function fallback_instance (opts) {
    return {
      drive: {
      
        'style/': {
          'style.css': {
            raw: `
              .black-btn {
                width: 100%; /* Fill the container */
                height: 50px;
                background-color: #000;
                color: #fff; /* Make text color white */
                border: none;
                border-radius: 8px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                transition: background 0.3s;
                margin: 0px;
              }

              .black-btn:hover {
                background-color: #3f3f3fff;
              }

           
            `
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}
