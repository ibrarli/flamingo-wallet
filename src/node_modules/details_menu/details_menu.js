const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const address_input = require('input_field')
const button = require('button')

module.exports = details_menu

async function details_menu(opts = {}) {
  const { sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  let dricons = []

  shadow.innerHTML = `
    <div class="details-menu-container">
      <div class="container-title">
        <div class="title">Address</div>
        <div class="close-icon"></div>
      </div>
      <div class="address-input"></div>
      <div class="secret-section">
        <div class="secret-title">Secret Recovery Phrase</div>
        <div class="secret-text-block" contenteditable="true"></div>
      </div>
      <div class="reveal-btn"></div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const address_input_component = shadow.querySelector('.address-input')
  const reveal_btn_component = shadow.querySelector('.reveal-btn')
  const closeBtn = shadow.querySelector('.close-icon')

  const subs = await sdb.watch(onbatch)
  const address_component = await address_input(subs[0])
  const button_component = await button(subs[1])

  address_input_component.append(address_component)
  reveal_btn_component.append(button_component)

  if (closeBtn) {
    closeBtn.onclick = () => {
      const parent = el.parentNode
      if (parent) {
        parent.classList.add('hidden')
      }
    }
  }

  return el

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  function iconject(data) {
    dricons = data
    const closeIcon = shadow.querySelector('.close-icon')
    if (closeIcon) closeIcon.innerHTML = dricons[0]
  }

  async function ondata(data) {
  }

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }
}

function fallback_module() {
  return {
    api,
    _: {
      'input_field': { $: '' },
      'button': { $: '' }
    }
  }

  function api(opts) {
    const input_field = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      },
      0: {
        placeholder: '1BoatSLRHtKNngkdXEeobR76b53LETtpyT',
        address: '1BoatSLRHtKNngkdXEeobR76b53LETtpyT',
        icon: 'apple'
      }
    }

    const button = {
      mapping: {
        style: 'style',
        data: 'data'
      },
      1: {
        label: 'Reveal'
      }
    }

    return {
      drive: {
        'icons/': {
          'x.svg': { '$ref': 'x.svg' },
        },
        'style/': {
          'details_menu.css': {'$ref': 'details_menu.css' }
        },
        'data/': {
          'opts.json': { raw: opts }
        }
      },
      _: { input_field, button }
    }
  }
}
