const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const btc_usd_rate = require('btc_usd_rate')

module.exports = templates

async function templates(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="template-container"></div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const container = shadow.querySelector('.template-container')
  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  function get_date_label(dateString) {
    const today = new Date()
    const target = new Date(dateString)

    const diffInDays = Math.floor(
      (today.setHours(0, 0, 0, 0) - target.setHours(0, 0, 0, 0)) / (1000 * 60 * 60 * 24)
    )

    if (diffInDays === 0) return 'Today'
    if (diffInDays === 1) return 'Yesterday'

    return target.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
  }


  async function ondata(data) {
    const { date, btc}  = data[0] || {}

    const date_label = get_date_label(date)

    const EXCHANGE_RATE = await btc_usd_rate('btc', 'usd')

    container.innerHTML =
      `
      <div class="template-left">
        <div class="template-title">${date_label}</div>
      </div>
      <div class="template-right">
        <div class="btc-amount">${btc} BTC</div>
        <div class="usd-amount">~$${(btc * EXCHANGE_RATE).toFixed(2)}</div>
      </div>
        
      `
  }
}

function fallback_module() {
  return {
    api
  }
  function api(opts) {
    return {
      drive: {
        'style/': {
          'style.css': {
            raw: `
              .template-container {
                display: flex;
                justify-content: space-between;
                gap: 12px;
                width: 100%;
                border: 1px solid #ccc; 
                border-radius: 6px; 
                background-color: #f7f7f7ff; 
                padding-inline: 15px;
                padding-block: 10px;
                box-sizing: border-box
              }
              .template-item {
                display: flex;
                align-items: center;
                padding: 8px;
                border-bottom: 1px solid #ddd;
              }
              .template-left {
                display: flex;
                flex-direction: column;
              }
              .template-title {
                font-size: 18px;
              }
              .template-right {
                text-align: right;
              }
              .btc-amount {
                font-size: 16px;
                font-weight: bold;
              }
              .usd-amount {
                font-size: 12px;
                color: gray;
              }
            `
          }
        },
        
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}
