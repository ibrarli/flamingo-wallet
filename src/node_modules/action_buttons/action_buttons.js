const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const general_button = require('general_button')
const switch_account = require('switch_account')

module.exports = action_buttons

async function action_buttons (opts = {}, protocol) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const _ = {
    send_general: null,
    receive_general: null,
    wallet_general: null
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="action-buttons-container">
        <div class="wallet-buttons wallet-button-container" id="wallet-button-container">
            <div class="dropdown-container hidden"></div> <!-- ✅ dropdown kept inside -->
        </div>
        <div class="send-receive-buttons">
            <div id="send-button-container"></div> 
            <div id="receive-button-container"></div> 
        </div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const wallet_container = shadow.querySelector('#wallet-button-container')
  const dropdown = wallet_container.querySelector('.dropdown-container')

  const subs = await sdb.watch(onbatch)

  if (protocol) {
    protocol({ from: 'action_buttons', notify: on_message })
  }

  // Create buttons
  const sendButton = await general_button(subs[0], button_protocol('send_general'))
  const receiveButton = await general_button(subs[1], button_protocol('receive_general'))
  const wallet_btn = await general_button(subs[2], button_protocol('wallet_general'))

  shadow.querySelector('#send-button-container').replaceWith(sendButton)
  shadow.querySelector('#receive-button-container').replaceWith(receiveButton)

  // ✅ Insert wallet button inside container, before dropdown
  wallet_container.insertBefore(wallet_btn, dropdown)

  // Ensure wallet button has action set right away
  wallet_btn._action = 'wallet_action'

  // Click handler for wallet
  let switchEl = null

  wallet_btn.onclick = async () => {
    if (wallet_btn._action !== 'wallet_action') return

    if (!dropdown.classList.contains('hidden')) {
      dropdown.classList.add('hidden')
      return
    }

    if (!switchEl) {
      switchEl = await switch_account(subs[3], {
        onClose: () => {
          dropdown.classList.add('hidden')
        }
      })
      dropdown.appendChild(switchEl)
    }

    dropdown.classList.remove('hidden')
  }

  // Send initial config messages
  _.send_general?.({
    type: 'button_name',
    data: { name: 'Send', action: 'send_message' }
  })

  _.receive_general?.({
    type: 'button_name',
    data: { name: 'Receive', action: 'receive_message' }
  })

  _.wallet_general?.({
    type: 'button_name',
    data: { name: 'Wallet', action: 'wallet_action' }
  })

  const action = {
    send_message,
    receive_message,
    wallet_action
  }

  return el

  // ------------------------- Helpers -------------------------

  function fail (data, type) {
    throw new Error('Invalid message type', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const handler = on[type] || fail
      handler(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {
    const buttonData = data[0]?.value || {}
    // you could update buttons dynamically here if needed
  }

  function button_protocol (key) {
    return send => {
      _[key] = send
      return send // return send function instead of handler object
    }
  }

  function on_message (message) {
    const { type, data } = message
    ;(action[type] || fail)(data, type)
  }

  // Action handlers
  function send_message (data, type) {
    console.log('Send button clicked - handling send action')
  }

  function receive_message (data, type) {
    console.log('Receive button clicked - handling receive action')
  }

  function wallet_action (data, type) {
    console.log('Wallet button clicked - handling wallet action')
  }
}

// ============ Fallback Setup for STATE ============
function fallback_module () {
  return {
    api,
    _: {
      'general_button': { $: '' },
      'switch_account': { $: '' }
    }
  }

  function api (opts = {}) {
    const general_button = {
      mapping: {
        style: 'style',
        data: 'data'
      },
      0: {}, // send button
      1: {}, // receive button
      2: {}  // wallet button
    }

    const switch_account = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      },
      3: {
        btc: 0.789,
        lightning: 0.9000
      } 
    }

    return {
      drive: {
        'style/': {
          'action_buttons.css': {
            '$ref': 'action_buttons.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      },
      _: {
        general_button,
        switch_account
      }
    }
  }
}
