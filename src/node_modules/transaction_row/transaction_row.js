const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = transaction_row

async function transaction_row (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="transaction-row">
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const row = shadow.querySelector('.transaction-row')
  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  function getDateLabel(dateString) {
    const today = new Date()
    const target = new Date(dateString)

    const diffInDays = Math.floor(
      (today.setHours(0, 0, 0, 0) - target.setHours(0, 0, 0, 0)) / (1000 * 60 * 60 * 24)
    )

    if (diffInDays === 0) return 'Today'
    if (diffInDays === 1) return 'Yesterday'

    return target.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) 
  }

  function generateRandomId() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
    const randomStr = Array.from({ length: 16 }, () => chars.charAt(Math.floor(Math.random() * chars.length))).join('')
    return randomStr.slice(0, 8) + '...' + randomStr.slice(-4)
  }

  function generateAvatar(seed) {
    return `https://api.dicebear.com/7.x/identicon/svg?seed=${encodeURIComponent(seed)}`
  }

  async function ondata(data) {
    let { avatar, tid, ttime, tamount, dateString } = data[0] || {}

    if (!tid) tid = generateRandomId()
    if (!avatar) avatar = generateAvatar(tid)

    const dateLabel = getDateLabel(dateString || new Date().toISOString())

    row.innerHTML = `
      <div class="transaction-detail">
        <div class="transaction-avatar">
          <img src="${avatar}" alt="avatar" />
        </div>
        <div class="transaction-data">
          <div class="transaction-id">${tid}</div>
          <div class="transaction-time">${ttime || '—'}</div>
          <div class="transaction-date">${dateLabel}</div>
        </div>
      </div>  
      <div class="transaction-amount">
        <span>${tamount || '0'} ₿</span>
      </div> 
    `
  }
}

function fallback_module () {
  return {
    api
  }
  function api (opts) {
    return {
        drive: {
          'style/':{
            'style.css':{ '$ref': 'transaction_row.css' }
          },
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        }
    }
  }
}
