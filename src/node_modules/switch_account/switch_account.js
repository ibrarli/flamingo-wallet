const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

// require pages early

module.exports = switch_account

async function switch_account (opts = {}, protocol) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  let dricons = []

  shadow.innerHTML = `
    <div class="switch-account-container">
      <div class="account-content"></div>
    </div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const content = shadow.querySelector('.account-content')

  const subs = await sdb.watch(onbatch)

  return el

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {
    const { btc, lightning } = data[0]

    content.innerHTML = `
      <div class="container-title">
        <div class="title">Switch Account</div>
        <div class="close-icon">${dricons[0]}</div>   
      </div>
      <div class="account-container btc-container">
        <div class="btc-icon">${dricons[1]}BTC</div>
        <div class="btc-amount">${parseFloat(btc).toFixed(4)}</div>       
      </div>
      <div class="account-container lightning-container">
        <div class="lightning-icon">${dricons[2]}Lightning</div>
        <div class="lightning-amount">${parseFloat(lightning).toFixed(4)}</div>       
      </div>
    ` 

    // Close button
    const close_btn = content.querySelector('.close-icon')
    if (close_btn) {
      close_btn.onclick = () => {
        const dropdown = el.parentNode
        if (dropdown) dropdown.classList.add('hidden')
      }
    }

    // BTC container
    const btc_container = content.querySelector('.btc-container')
    if (btc_container) {
      btc_container.onclick = async () => {
        try {
          const home_page = require('home_page')
          const homeEl = await home_page(subs[0])
          let host = el.getRootNode().host || el
          host.replaceWith(homeEl)
        } catch (error) {
          console.error('Failed to navigate to home_page:', error)
        }
      }
    }

    // Lightning container
    const lightning_container = content.querySelector('.lightning-container')
    if (lightning_container) {
      lightning_container.onclick = async () => {
        try {
          const lightning_page = require('lightning_page')
          const lightningEl = await lightning_page(subs[1])
          let host = el.getRootNode().host || el
          host.replaceWith(lightningEl)
        } catch (error) {
          console.error('Failed to navigate to lightning_page:', error)
        }
      }
    }
  }

  function fail (data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  function iconject (data) {
    dricons = data
  }
}

// ================== fallback ==================
function fallback_module () {
  return {
    api: fallback_instance,
    _: {
      'home_page': { $: '' },
      'lightning_page': { $: '' }
    }
  }

  function fallback_instance (opts) {
    const home_page = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      },
      0: ''
    }

    const lightning_page = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      },
      1: ''
    }

    return {
      drive: {
        'icons/': {
          'x.svg': { '$ref': 'x.svg' },
          'btc.svg': { '$ref': 'btc.svg' },
          'lightning.svg': { '$ref': 'lightning.svg' }
        },
        'style/': {
          'style.css': { '$ref': 'switch_account.css' }
        },
        'data/': {
          'opts.json': { raw: opts }
        }
      },
      _: { home_page, lightning_page }
    }
  }
}