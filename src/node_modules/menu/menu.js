const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const home_contents = require('home_contents')
const contacts_list = require('contacts_list')
const details_menu = require('details_menu')
const more_menu = require('more_menu')

module.exports = menu

async function menu(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb
  const on = { style: inject, data: ondata, icons: iconject }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="main-container">
      <div class="content-container"></div>
      <div class="menu-container"></div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const footer = shadow.querySelector('.menu-container')
  const content = shadow.querySelector('.content-container')

  let dricons = []
  const subs = await sdb.watch(onbatch)

  // ‚úÖ Create all components once
  const home_component = await home_contents(subs[0])
  const contacts_component = await contacts_list(subs[1])
  const details_component = await details_menu(subs[2])
  const more_component = await more_menu(subs[3])

  // ‚úÖ Append all, hide except Home
  content.appendChild(home_component)
  content.appendChild(contacts_component)
  content.appendChild(details_component)
  content.appendChild(more_component)

  contacts_component.style.display = 'none'
  details_component.style.display = 'none'
  more_component.style.display = 'none'

  return el

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(p => drive.get(p).then(f => f.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  async function ondata(data) {
    footer.innerHTML = `
      <div class="tab-container active" data-tab="home">
        <div class="icon">${dricons[0]}</div>
        <div class="label">Home</div>
      </div>
      <div class="tab-container" data-tab="contacts">
        <div class="icon">${dricons[1]}</div>
        <div class="label">Contacts</div>
      </div>
      <div class="tab-container" data-tab="details">
        <div class="icon">${dricons[2]}</div>
        <div class="label">Details</div>
      </div>
      <div class="tab-container" data-tab="more">
        <div class="icon">${dricons[3]}</div>
        <div class="label">More</div>
      </div>
    `

    footer.querySelectorAll('.tab-container').forEach(tab => {
      tab.addEventListener('click', () => {
        const tabType = tab.dataset.tab
        footer.querySelectorAll('.tab-container').forEach(t => t.classList.remove('active'))
        tab.classList.add('active')

        // ‚úÖ Hide all first
        home_component.style.display = 'none'
        contacts_component.style.display = 'none'
        details_component.style.display = 'none'
        more_component.style.display = 'none'

        // ‚úÖ Show only the selected one
        if (tabType === 'home') home_component.style.display = ''
        if (tabType === 'contacts') contacts_component.style.display = ''
        if (tabType === 'details') details_component.style.display = ''
        if (tabType === 'more') more_component.style.display = ''
      })
    })
  }

  function iconject(data) {
    dricons = data
  }

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }
}

function fallback_module() {
  return {
    api: fallback_instance,
    _: {
      home_contents: { $: '' },
      contacts_list: { $: '' },
      details_menu: { $: '' },
      more_menu: { $: '' }
    }
  }

  function fallback_instance(opts) {
    const home_contents = {
      mapping: { style: 'style', data: 'data' },
      0: { text: 'üè† Home Content Loaded' }
    }

    const contacts_list = {
      mapping: { style: 'style', data: 'data' },
      0: {
        value: [
          {
            avatar: "https://tse4.mm.bing.net/th/id/OIP.VIRWK2jj8b2cHBaymZC5AgHaHa?w=800&h=800&rs=1&pid=ImgDetMain&o=7&rm=3",
            name: 'Mark Kevin',
            message: 'Payment Received successfully',
            time: '3 hr',
            unread: 5,
            online: true,
            lightining: true
          },
          {
            avatar: "https://tse2.mm.bing.net/th/id/OIP.255ajP8y6dHwTTO8QbBzqwHaHa?rs=1&pid=ImgDetMain&o=7&rm=3",
            name: 'David Clark',
            message: 'You have a new message from Mark',
            time: '1 hr',
            unread: 5,
            online: false,
            lightining: false
          },
          {
            avatar: "https://tse4.mm.bing.net/th/id/OIP.bdn3Kne-OZLwGM8Uoq5-7gHaHa?w=512&h=512&rs=1&pid=ImgDetMain&o=7&rm=3",
            name: 'David Clark',
            message: 'Received funds',
            time: '1 hr',
            unread: 0,
            online: true,
            lightining: true
          },
          {
            avatar: "https://tse4.mm.bing.net/th/id/OIP.7XLV6q-D_hA-GQh_eJu52AHaHa?rs=1&pid=ImgDetMain&o=7&rm=3",
            name: 'Sara Ahmed',
            message: 'Invoice sent',
            time: '2 hr',
            unread: 0,
            online: false,
            lightining: false
          }
        ]
      }
    }

    const details_menu = {
      mapping: { style: 'style', data: 'data', icons: 'icons' },
      0: { text: 'üìã Details Menu Content Loaded' }
    }

    const more_menu = {
      mapping: { style: 'style', data: 'data', icons: 'icons' },
      0: { text: '‚öôÔ∏è More Menu Content Loaded' }
    }

    return {
      drive: {
        'icons/': {
          'home.svg': { '$ref': 'home.svg' },
          'contacts.svg': { '$ref': 'contacts.svg' },
          'details.svg': { '$ref': 'details.svg' },
          'more.svg': { '$ref': 'more.svg' }
        },
        'style/': { 'menu.css': { '$ref': 'menu.css' } },
        'data/': { 'opts.json': { raw: opts } }
      },
      _: { home_contents, contacts_list, details_menu, more_menu }
    }
  }
}