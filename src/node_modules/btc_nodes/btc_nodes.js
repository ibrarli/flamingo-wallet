const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = btc_nodes

async function btc_nodes (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  let dricons = []

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="nodes-card"></div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const container = shadow.querySelector('.nodes-card')

  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

   


function iconject(data) {
  dricons = data   // just save it
}

async function ondata (data) {
  container.innerHTML = `
    <div class="header">
      <div class="dropdown">
        <button class="dropdown-btn">Bitcoin Nodes <span class="arrow"></span></button>
      </div>        
      <button class="close-btn">âœ•</button>
    </div>
    <div class="node-btn-wrap">
      <button class="node-btn">Node</button>
    </div>
    <div class="tab-indicator">
      <span class="dot active"></span>
      <span class="dot"></span>
    </div>
    <div class="logs-wrap">
      <label>Logs</label>
      <textarea class="logs-textarea"></textarea>
    </div>
  `

  // now insert icon if we already have it
  if (dricons.length) {
    const arrow_icons = shadow.querySelector('.arrow')
    if (arrow_icons) {
      arrow_icons.innerHTML = dricons[0]
    }
  }

  const closeBtn = container.querySelector('.close-btn')
  closeBtn.onclick = () => { container.innerHTML = "" }
}

}

function fallback_module () {
  return {
    api: fallback_instance,
  }
  function fallback_instance (opts) {
    return {
      drive: {
        'icons/': {
          'arrow-down.svg': { '$ref': 'arrow-down.svg' },
        },
        'style/': {
          'style.css': {
            raw: `
              .nodes-card {
                background: #fff;
                border-radius: 10px;
                padding: 12px;
                width: 380px;
                box-sizing: border-box;
                font-family: sans-serif;
              }
              .header {
                display: flex;
                justify-content: center;
                align-items: center;
                position: relative;
                margin-block: 8px;
              }
              .title {
                font-size: 14px;
                font-weight: 600;
              }
              .close-btn {
                position: absolute;
                right: 0;
                top: 0;
                border: none;
                background: none;
                cursor: pointer;
                font-size: 14px;
              }
              .dropdown {
                display: flex;
                justify-content: center;
                margin-bottom: 10px;
              }
              .dropdown-btn {
                border: none;
                background: transparent;
                cursor: pointer;
                font-size: 20px;
                display: flex;
                align-items: center;
                gap: 4px;
              }
              .arrow {
                font-size: 12px;
              }
              .node-btn-wrap {
                text-align: center;
                margin-bottom: 6px;
              }
              .node-btn {
                border: 1px solid #000;
                background: #fff;
                border-radius: 12px;
                padding: 6px 16px;
                margin-bottom: 10px;
                cursor: pointer;
                font-size: 18px;
              }
              .tab-indicator {
                display: flex;
                justify-content: center;
                gap: 4px;
                margin-bottom: 12px;
              }
              .dot {
                width: 6px;
                height: 6px;
                border-radius: 50%;
                background: #000;
                display: inline-block;
              }
              .dot.active {
                width: 15px; 
                border-radius: 5px;
              }
              .logs-wrap {
                display: flex;
                flex-direction: column;
                gap: 4px;
              }
              .logs-wrap label {
                font-size: 12px;
                color: #444;
              }
              .logs-textarea {
                border: 1px solid #ccc;
                border-radius: 6px;
                padding: 6px;
                font-size: 18px;
                outline: none;
                resize: none;
                height: 200px; 
              }
            `
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          },
        }
      }
    }
  }
}
