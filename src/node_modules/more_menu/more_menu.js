const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = more_menu

async function more_menu(opts = {}) {
  const { sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  let icons = []

  shadow.innerHTML = `
    <div class="more-menu-container"></div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const row = shadow.querySelector('.more-menu-container')

  await sdb.watch(onbatch)
  return el

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  async function ondata() {
    row.innerHTML = `
      <div class="container-title">
        <div class="title">More</div>
        <div class="close-icon">${icons[0]}</div>
      </div>
      <div class="option-container">
        <div class="dot-icon">${icons[1]}</div>
        <div class="option-label">Nodes</div>
      </div>
      <div class="option-container">
        <div class="dot-icon">${icons[1]}</div>
        <div class="option-label">Peers</div>
      </div>
    `

    const closeBtn = row.querySelector('.close-icon')
    if (closeBtn) {
      closeBtn.onclick = () => {
        const dropdown = el.parentNode
        if (dropdown) {
          dropdown.classList.add('hidden')
        }
      }
    }
  }

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  function iconject(data) {
    icons = data
  }
}

function fallback_module() {
  return {
    api: fallback_instance
  }

  function fallback_instance(opts) {
    return {
      drive: {
        'icons/': {
          'x.svg': { '$ref': 'x.svg' },
          'dot.svg': { '$ref': 'dot.svg' },
        },
        'style/': {
          'style.css': { '$ref': 'more_menu.css' },
        },
        'data/': {
          'opts.json': { raw: opts }
        }
      }
    }
  }
}
