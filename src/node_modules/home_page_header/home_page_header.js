const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = home_page_header

async function home_page_header (opts = {}) {
    const { id, sdb } = await get(opts.sid)
    const { drive } = sdb

    const on = {
        style: inject,
        data: ondata,
        icons: iconject,
    }

    const el = document.createElement('div')
    const shadow = el.attachShadow({ mode: 'closed' })

    let dricons = []

    shadow.innerHTML = `
        <div class="header-container">
   
        </div>
        <style></style>
    `

    const style = shadow.querySelector('style')
    const container = shadow.querySelector('.header-container')

    await sdb.watch(onbatch)
    return el

    async function onbatch (batch) {
        for (const { type, paths } of batch) {
        const data = await Promise.all(
            paths.map(path => drive.get(path).then(file => file.raw))
        )
        const func = on[type] || fail
        await func(data, type)
        }
    }

    function inject (data) {
        style.textContent = data[0]
    }

    async function ondata (data) {
      const { wallet, amount } = data[0]
  
      let heading = ""
      let icon = ""
      let display_amount = amount > 0 ? amount : "0.00"

      if (wallet == "btc"){
        heading = "Bitcoin Wallet"
        icon = dricons[0]
      } else if (wallet == "lightning"){
        heading = "Lightning Wallet"
        icon = dricons[1]
      } else{
        console.log("Wrong wallet")
      }

      container.innerHTML = `
          <div class="heading">${heading}</div>
          <div class="wallet-row">
            <div class="icon-slot">${icon}</div>
            <div class="wallet-amount">${display_amount}</div>
          </div>
      ` 
    }


    function fail (data, type) {
        throw new Error('invalid message', { cause: { data, type } })
    }

    function iconject (data) {
        dricons = data
    } 
}

function fallback_module () {
  return {
    api: fallback_instance
  }

  function fallback_instance (opts) {
    return {
      drive: {
        'icons/': {
          'btc.svg': {
            '$ref': 'btc.svg'
          },
          'lightning.svg': {
            '$ref': 'lightning.svg'
          },
        },
        'style/': {
          'style.css': {
            raw: `
              .header-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                padding: 20px;
                font-family: Arial, sans-serif;
              }

              .heading {
                font-size: 16px;
                font-weight: 600;
                margin-bottom: 12px;
                text-align: center;
              }

              .wallet-row {
                display: flex;
                align-items: center;
                gap: 10px;
                justify-content: center;
              }

              .icon-slot svg {
                width: 32px;
                height: 32px;
              }

              .wallet-amount {
                font-size: 28px;
                font-weight: bold;
              }
            `
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}
