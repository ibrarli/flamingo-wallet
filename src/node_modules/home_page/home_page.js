const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const menu = require('menu')

module.exports = home_page

async function home_page(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = { style: inject, data: ondata }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="home-page-container"></div>
    <style></style>
  `
  const container = shadow.querySelector('.home-page-container')
  const style = shadow.querySelector('style')

  const subs = await sdb.watch(onbatch)
  const menu_component = await menu(subs[0])
  container.appendChild(menu_component)

  return el

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(p => drive.get(p).then(f => f.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) { style.textContent = data[0] }
  function ondata(data) {}
  function fail(data, type) { throw new Error('invalid message', { cause: { data, type } }) }
}

function fallback_module() {
  return {
    api,
    _: { menu: { $: '' } }
  }

  function api(opts) {
    const menu = {
      mapping: { style: 'style', data: 'data', icons: 'icons' },
      0: ''
    }

    return {
      drive: {
        'style/': {
          'home_page.css': { '$ref': 'home_page.css' }
        },
        'data/': { 'opts.json': { raw: opts } }
      },
      _: { menu }
    }
  }
}