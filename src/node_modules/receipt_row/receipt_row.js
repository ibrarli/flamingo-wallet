const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = receipt_row

async function receipt_row(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  let dricons = []

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="receipt-row"></div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const row = shadow.querySelector('.receipt-row')

  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  function iconject(data) {
    dricons = data 
  }

  async function ondata(data) {
    let { label, value, is_link, is_total } = data[0] || {}

    // Auto-calc total if marked as total
    if (isTotal && Array.isArray(data[1])) {
      const rows = data[1]
      const fees = parseFloat((rows.find(r => r.label === "Transaction Fees")?.value || "0").replace(/[^\d.]/g, ""))
      const receives = parseFloat((rows.find(r => r.label === "Recipient Receives")?.value || "0").replace(/[^\d.]/g, ""))
      const total = (fees + receives).toFixed(4)
      value = `BTC ${total}`
    }

    // Default value rendering
    let valueHtml = value || ""

    // If link → make it clickable blue
    if (is_link) {
      valueHtml = `<a href="${value}" target="_blank" class="receipt-link">${value}</a>`
    }

    // If total → prepend BTC icon
    if (is_total && value) {
      valueHtml = `<span class="btc-icon">${dricons[0] || ""}</span> ${value}`
    }
    row.className = `receipt-row ${isTotal ? "total" : ""}`

    row.innerHTML = `
      <div class="receipt-label">${label}</div>
      <div class="receipt-value">${valueHtml}</div>
      ${isTotal ? "" : `<div class="divider"></div>`}
    `
    
  }

}

function fallback_module() {
  return {
    api: fallback_instance
  }
  function fallback_instance(opts) {
    return {
      drive: {
        'icons/': {
          'btc.svg': { '$ref': 'btc.svg' },
        },
        'style/': {
         'style.css': {
            raw: `
              .receipt-row {
                padding: 8px 0;
              }

              .receipt-label {
                color: #6D6E6F;
                font-size: 14px;
                font-weight: 400; /* regular */
                margin-bottom: 4px;
              }

              .receipt-value {
                color: #000000;
                font-size: 18px;
                font-weight: 400; /* regular */
                margin-bottom: 6px;
              }

              .receipt-row.total .receipt-value {
                font-size: 28px;
                font-weight: 600;
                color: #000000;
              }

              .receipt-link {
                color: blue;
                text-decoration: underline;
                cursor: pointer;
              }

              .btc-icon {
                width: 30px;
                height: 30px;
                display: inline-block;
                vertical-align: middle;
                margin-right: 6px;
              }

              .divider {
                height: 1px;
                background: #ddd;
                margin-top: 6px;
              }
            `
          }
        },
        'data/': {
          'opts.json': { raw: opts }
        }
      }
    }
  }
}
