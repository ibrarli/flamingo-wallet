const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = btc_input_card

async function btc_input_card (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb
  
  const on = {
    style: inject,
    data: ondata,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="btc-card"></div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const container = shadow.querySelector('.btc-card')
  
  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {
    let {
      currency = "BTC",
      amount = 0,
      usdValue = 0,
      balance = 2, // default available BTC
      showBalance = true
    } = data[0]

    const EXCHANGE_RATE = 120000 // 1 BTC = $120,000
    let errorMessage = ""

    container.innerHTML = `
      <div class="header">
        <span class="toggle ${currency === 'BTC' ? 'active' : ''}" data-currency="BTC">BTC</span>
        <span class="toggle ${currency === 'USD' ? 'active' : ''}" data-currency="USD">USD</span>
      </div>

      <div class="main-area"> 
        <div class="amount-row">
          <input type="number" step="0.0001" value="${currency === 'BTC' ? amount : usdValue}" class="amount-input" />
          <div class="actions">
            <button class="close-btn">âœ•</button>
            <button class="btn half-btn">Half</button>
            <button class="btn all-btn">All</button>
          </div>
        </div>
        <div class="error"></div>
        ${showBalance ? `<div class="balance">Balance ${balance} BTC</div>` : ""}
        <div class="usd-text">
          You are sending 
          <strong>
            ${currency === 'BTC' ? `USD ${(amount * EXCHANGE_RATE).toFixed(2)}` : `${(usdValue / EXCHANGE_RATE).toFixed(4)} BTC`}
          </strong>
        </div>
      </div>
    `

    const amountInput = container.querySelector('.amount-input')
    const halfBtn = container.querySelector('.half-btn')
    const allBtn = container.querySelector('.all-btn')
    const btcToggle = container.querySelector('[data-currency="BTC"]')
    const usdToggle = container.querySelector('[data-currency="USD"]')
    const usdText = container.querySelector('.usd-text strong')
    const closeBtn = container.querySelector('.close-btn')
    const errorDiv = container.querySelector('.error')

    function showError(msg) {
      errorDiv.textContent = msg || ""
    }

    function updateValues(newAmountBTC) {
      amount = parseFloat(newAmountBTC) || 0
      usdValue = (amount * EXCHANGE_RATE).toFixed(2)
      if (amount > balance) {
        showError("Insufficient balance, please add funds to your account")
      } else {
        showError("")
      }
    }

    function updateDisplay(value, curr) {
      amountInput.value = value
      usdText.textContent = curr === 'BTC'
        ? `USD ${usdValue}`
        : `${amount} BTC`
      container.querySelectorAll('.toggle').forEach(t => t.classList.remove('active'))
      container.querySelector(`[data-currency="${curr}"]`).classList.add('active')
    }

    btcToggle.addEventListener('click', () => {
      currency = 'BTC'
      updateDisplay(amount, currency)
    })

    usdToggle.addEventListener('click', () => {
      currency = 'USD'
      updateDisplay(usdValue, currency)
    })

    halfBtn.addEventListener('click', () => {
      amount = balance / 2
      usdValue = (amount * EXCHANGE_RATE).toFixed(2)
      updateDisplay(currency === 'BTC' ? amount : usdValue, currency)
      showError("")
    })

    allBtn.addEventListener('click', () => {
      amount = balance
      usdValue = (amount * EXCHANGE_RATE).toFixed(2)
      updateDisplay(currency === 'BTC' ? amount : usdValue, currency)
      showError("")
    })

    closeBtn.addEventListener('click', () => {
      amount = 0
      usdValue = 0
      updateDisplay(currency === 'BTC' ? amount : usdValue, currency)
      showError("")
    })

    amountInput.addEventListener('input', () => {
      if (currency === 'BTC') {
        updateValues(amountInput.value)
      } else {
        usdValue = parseFloat(amountInput.value) || 0
        amount = usdValue / EXCHANGE_RATE
        if (amount > balance) {
          showError("Insufficient balance, please add funds to your account")
        } else {
          showError("")
        }
      }
      usdText.textContent = currency === 'BTC'
        ? `USD ${usdValue}`
        : `${amount.toFixed(4)} BTC`
    })
  }
}

function fallback_module () {
  return {
    api: fallback_instance,
  }
  function fallback_instance (opts) {
    return {
      drive: {
        'style/': {
          'style.css': {
            raw: `
              .btc-card {
                background: #f9f9f9;
                border: 1px solid #ccc;
                border-radius: 8px;
                padding: 16px;
                width: 100%;
                box-sizing: border-box;
                margin-top: 15px;
                margin-bottom: 30px;
              }

              .header {
                display: flex;
                gap: 10px;
                font-size: 14px;
                font-weight: bold;
                margin-bottom: 10px;
              }

              .toggle {
                cursor: pointer;
                color: #888;
                padding-bottom: 2px;
              }

              .toggle.active {
                color: #000;
                border-bottom: 2px solid #000;
              }

              .main-area{
                display: flex;
                flex-direction: column;
                justify-content: space-between;
                min-height: 110px;              
              }
              
              .amount-row {
                display: flex;
                align-items: center;
                justify-content: space-between;
                margin-bottom: 6px;
              }
              .amount-input {
                font-size: 30px;
                font-weight: 500;
                width: 120px;
                text-align: right;
                border: none;
                outline: none;
                background: transparent;
                text-align: right;
                direction: rtl;
              }
              .actions {
                display: flex;
                gap: 6px;
                align-items: center;
              }
              .btn {
                border: none;
                background: #000;
                color: #fff;
                padding: 3px 8px;
                font-size: 12px;
                cursor: pointer;
                border-radius: 3px;
              }

              .close-btn {
                background: #000;
                border: none;
                color: #fff;
                font-size: 12px;
                cursor: pointer;
                width: 20px;
                height: 20px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 0;
              }

              .divider {
                width: 100%;
                height: 1px;
                background-color: #000; 
                margin: 2px 0; 
              }

              .error {
                color: red;
                font-size: 13px;
                padding-block: 6px;
              }

              .balance {
                font-size: 12px;
                color: #666;
                padding-bottom:10px;
              }
          
              .usd-text {
                font-size: 14px;
                margin-top: auto;
              }
            `
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          },
        }
      }
    }
  }
}
